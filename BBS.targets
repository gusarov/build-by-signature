<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>

	<Target Name='BbsDetectDiagnostic' AfterTargets='CopyFilesToOutputDirectory'>
		<PropertyGroup Condition="'$(BbsDiag)'==''">
			<BbsDiag>$(registry:HKEY_CURRENT_USER\Software\Bbs@Diagnostic)</BbsDiag>
		</PropertyGroup>
		<PropertyGroup Condition="'$(BbsDiag)'==''">
			<BbsDiag>False</BbsDiag>
		</PropertyGroup>
		<PropertyGroup Condition="$(BbsDiag)">
			<BbsDiagLevel>High</BbsDiagLevel>
		</PropertyGroup>
		<PropertyGroup Condition="!$(BbsDiag)">
			<BbsDiagLevel>Low</BbsDiagLevel>
		</PropertyGroup>
	</Target>

	<Target Name='BbsDetectState' AfterTargets='CopyFilesToOutputDirectory'>
		<PropertyGroup Condition="'$(BbsEnabled)'==''">
			<BbsEnabled>$(registry:HKEY_CURRENT_USER\Software\Bbs@Enabled)</BbsEnabled>
		</PropertyGroup>
		<PropertyGroup Condition="'$(BbsEnabled)'==''">
			<BbsEnabled>$(registry:HKEY_LOCAL_MACHINE\Software\Bbs@Enabled)</BbsEnabled>
		</PropertyGroup>
		<PropertyGroup Condition="'$(BbsEnabled)'==''">
			<BbsEnabled>False</BbsEnabled>
		</PropertyGroup>
	</Target>

	<UsingTask AssemblyFile='BBS.DLL' TaskName='GenerateHashTask' />

	<Target Name='BbsGenerateHash' AfterTargets='CopyFilesToOutputDirectory' Inputs='$(TargetPath)' Outputs='$(TargetPath).bbs' Condition="$(BbsEnabled)">
		<Message Text=' * Bbs GenerateHash $(TargetName)' Importance="$(BbsDiagLevel)" Condition="$(BbsDiag)" />
		<GenerateHashTask
			RevertTargetStamp="True"
			TargetPath='$(TargetPath)'
			OutputPath='$(TargetPath).bbs'
			>
		</GenerateHashTask>
	</Target>
	
	<!--
	<Target Name='BbsGenerateCopyLocalReference' AfterTargets='CopyFilesToOutputDirectory' Condition="$(BbsEnabled)">
		<ItemGroup>
			<BbsReferenceCopyLocalPaths Remove='@BbsReferenceCopyLocalPaths' />
			<BbsReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->'%(Identity).bbs')">
				<OriginalFile>%(Identity)</OriginalFile>
				<OriginalFilename>%(Filename)</OriginalFilename>
				<OriginalExtension>%(Extension)</OriginalExtension>
			</BbsReferenceCopyLocalPaths>
		</ItemGroup>
	</Target>
	-->
	
	<!-- TODO Move to dll or to targets for performance reasons -->
	<UsingTask TaskName="BbsCopyLocalReference" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<ReferenceCopyLocalPaths Required="True" ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
			<OutDir Required="True" />
		</ParameterGroup>
		<Task>
			<Reference Include="System" />
			<Reference Include="System.Core" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Linq" />
			<Using Namespace="Microsoft.Build.Framework" />
			<Code Type="Fragment" Language="cs">
			<![CDATA[
Log.LogMessage(MessageImportance.High, " * BbsCopyLocalReference # Enter");

foreach (var reference in ReferenceCopyLocalPaths)
{
	// we should copy only file that has corresponding .bbs file near them that is actually out of date
	var name = reference.GetMetadata("FileName");
	var dll = reference.GetMetadata("FullPath");
	var dllTarget = Path.Combine(OutDir, reference.GetMetadata("DestinationSubDirectory"), Path.GetFileName(dll));
	var bbs = reference.GetMetadata("FullPath")+".bbs";
	var bbsTarget = Path.Combine(OutDir, reference.GetMetadata("DestinationSubDirectory"), Path.GetFileName(bbs));
	
	if (File.Exists(dll) && File.Exists(bbs))
	{
		if (!File.Exists(bbsTarget) || File.GetLastWriteTimeUtc(bbs) > File.GetLastWriteTimeUtc(bbsTarget))
		{
			Log.LogMessage(MessageImportance.High, " * BbsCopyLocalReference # Update " + name);
			File.Copy(bbs, bbsTarget, true);
			File.Copy(dll, dllTarget, true);
		} else {
			Log.LogMessage(MessageImportance.High, " * BbsCopyLocalReference # Skip " + name);
		}
	} else {
		Log.LogMessage(MessageImportance.High, " * BbsCopyLocalReference # N/A " + name);
	}
}
			]]>
			</Code>
		</Task>
	</UsingTask>
	
	<Target Name='BbsCopyLocalReference' AfterTargets='CopyFilesToOutputDirectory' Condition="'$(UseCommonOutputDirectory)' != 'true' and $(BbsEnabled)">
		<BbsCopyLocalReference ReferenceCopyLocalPaths="@(ReferenceCopyLocalPaths)" OutDir="$(OutDir)" />
	</Target>
	
	<!-- optimized for partial build -->
	<!--
	<Target Name='BbsCopyLocalReference' AfterTargets='CopyFilesToOutputDirectory' Condition="'$(UseCommonOutputDirectory)' != 'true' and $(BbsEnabled)" Inputs="@(BbsReferenceCopyLocalPaths)" Outputs="@(BbsReferenceCopyLocalPaths->'$(OutDir)%(DestinationSubDirectory)%(Filename)%(Extension)')">
		<Message Text=' * Bbs CopyFilesMarkedCopyLocal Retries=$(CopyRetryCount) Delay=$(CopyRetryDelayMilliseconds)' Importance="$(BbsDiagLevel)" Condition="$(BbsDiag)" />
		<Message Text=' * Bbs CopyFilesMarkedCopyLocal %(BbsReferenceCopyLocalPaths.Identity)' Importance="$(BbsDiagLevel)" Condition="$(BbsDiag) and '$(UseCommonOutputDirectory)' != 'true' and Exists(%(BbsReferenceCopyLocalPaths.FullPath)) and Exists('%(BbsReferenceCopyLocalPaths.OriginalFile)')" />
		<Copy
			Condition="Exists(%(BbsReferenceCopyLocalPaths.FullPath)"
			SourceFiles="%(BbsReferenceCopyLocalPaths.FullPath)"
			DestinationFiles="$(OutDir)%(BbsReferenceCopyLocalPaths.DestinationSubDirectory)%(BbsReferenceCopyLocalPaths.Filename)%(BbsReferenceCopyLocalPaths.Extension)"
			SkipUnchangedFiles="True"
			OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
			Retries="$(CopyRetryCount)"
			RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
			UseHardlinksIfPossible="False"
			>
			<Output TaskParameter="DestinationFiles" ItemName="FileWritesShareable"/>
		</Copy>
		<Copy
			Condition="'$(UseCommonOutputDirectory)' != 'true' and Exists(%(BbsReferenceCopyLocalPaths.FullPath)) and Exists('%(BbsReferenceCopyLocalPaths.OriginalFile)')"
			SourceFiles="%(BbsReferenceCopyLocalPaths.OriginalFile)"
			DestinationFiles="$(OutDir)%(BbsReferenceCopyLocalPaths.DestinationSubDirectory)%(BbsReferenceCopyLocalPaths.OriginalFilename)%(BbsReferenceCopyLocalPaths.OriginalExtension)"
			SkipUnchangedFiles="False"
			OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
			Retries="$(CopyRetryCount)"
			RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
			UseHardlinksIfPossible="$(CreateHardLinksForCopyLocalIfPossible)"
			>
			<Output TaskParameter="DestinationFiles" ItemName="FileWritesShareable"/>
		</Copy>
	</Target>
	-->
</Project>
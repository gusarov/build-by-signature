<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>

	<!-- Disable host compiler -->
	<!-- In real production BBS benifit is much more significant then lack of HostCompiler optimization -->
	<PropertyGroup>
		<UseHostCompilerIfAvailable>False</UseHostCompilerIfAvailable>
		<BuildingInsideVisualStudio>False</BuildingInsideVisualStudio>
	</PropertyGroup>
	
	<Target Name='BbsDetectDiagnostic' AfterTargets='CopyFilesToOutputDirectory'>
		<PropertyGroup Condition="'$(BbsDiag)'==''">
			<BbsDiag>$(registry:HKEY_CURRENT_USER\Software\Bbs@Diagnostic)</BbsDiag>
		</PropertyGroup>
		<PropertyGroup Condition="'$(BbsDiag)'==''">
			<BbsDiag>$(registry:HKEY_LOCAL_MACHINE\Software\Bbs@Diagnostic)</BbsDiag>
		</PropertyGroup>
		<PropertyGroup Condition="'$(BbsDiag)'==''">
			<BbsDiag>False</BbsDiag>
		</PropertyGroup>
		<PropertyGroup Condition="$(BbsDiag)">
			<BbsDiagLevel>High</BbsDiagLevel>
		</PropertyGroup>
		<PropertyGroup Condition="!$(BbsDiag)">
			<BbsDiagLevel>Low</BbsDiagLevel>
		</PropertyGroup>
	</Target>

	<Target Name='BbsDetectState' AfterTargets='CopyFilesToOutputDirectory'>
		<PropertyGroup Condition="'$(BbsEnabled)'==''">
			<BbsEnabled>$(registry:HKEY_CURRENT_USER\Software\Bbs@Enabled)</BbsEnabled>
		</PropertyGroup>
		<PropertyGroup Condition="'$(BbsEnabled)'==''">
			<BbsEnabled>$(registry:HKEY_LOCAL_MACHINE\Software\Bbs@Enabled)</BbsEnabled>
		</PropertyGroup>
		<PropertyGroup Condition="'$(BbsEnabled)'==''">
			<BbsEnabled>True</BbsEnabled>
		</PropertyGroup>
	</Target>

<!--
-->
	<UsingTask AssemblyFile='BBS.DLL' TaskName='GenerateHashTask' />
	<Target Name='BbsGenerateHash' AfterTargets='CopyFilesToOutputDirectory' Inputs='$(TargetPath)' Outputs='$(TargetPath).bbs' Condition="$(BbsEnabled)">
		<Message Text=' * Bbs GenerateHash $(TargetName)' Importance="$(BbsDiagLevel)" Condition="$(BbsDiag)" />
		<GenerateHashTask
			ContinueOnError="True"
			RevertTargetStamp="True"
			TargetPath='$(TargetPath)'
			BbsPath='$(TargetPath).bbs'
			>
		</GenerateHashTask>
	</Target>
	
<!--
-->
	<UsingTask AssemblyFile='BBS.DLL' TaskName='RevertTargetStampTask' />
	<Target Name='BbsRevertTargetStamp' AfterTargets='CopyFilesToOutputDirectory' Condition="$(BbsEnabled)">
		<Message Text=' * Bbs BbsRevertTargetStamp $(TargetName)' Importance="$(BbsDiagLevel)" Condition="$(BbsDiag)" />
		<RevertTargetStampTask
			ContinueOnError="True"
			TargetPath='$(TargetPath)'
			BbsPath='$(TargetPath).bbs'
			>
		</RevertTargetStampTask>
	</Target>
	
	<UsingTask AssemblyFile='BBS.DLL' TaskName='BbsCopyLocalReference' />
	<Target Name='BbsCopyLocalReference' AfterTargets='CopyFilesToOutputDirectory' Condition="'$(UseCommonOutputDirectory)' != 'true' and $(BbsEnabled)">
		<BbsCopyLocalReference ReferenceCopyLocalPaths="@(ReferenceCopyLocalPaths)" OutDir="$(OutDir)" />
	</Target>

	<!-- Moved to dll for performance reasons, but leaved here for flexibility and quick patching
	<UsingTask TaskName="BbsCopyLocalReference" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<ReferenceCopyLocalPaths Required="True" ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
			<OutDir Required="True" />
		</ParameterGroup>
		<Task>
			<Reference Include="System" />
			<Reference Include="System.Core" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Linq" />
			<Using Namespace="Microsoft.Build.Framework" />
			<Code Type="Fragment" Language="cs">
			<![CDATA[
Log.LogMessage(MessageImportance.High, " * BbsCopyLocalReference # Enter");

foreach (var reference in ReferenceCopyLocalPaths)
{
	// we should copy only file that has corresponding .bbs file near them that is actually out of date
	var name = reference.GetMetadata("FileName");
	var dll = reference.GetMetadata("FullPath");
	var dllTarget = Path.Combine(OutDir, reference.GetMetadata("DestinationSubDirectory"), Path.GetFileName(dll));
	var bbs = reference.GetMetadata("FullPath")+".bbs";
	var bbsTarget = Path.Combine(OutDir, reference.GetMetadata("DestinationSubDirectory"), Path.GetFileName(bbs));
	var ext = Path.GetExtension(dll);
	
	if (/*File.Exists(dll) &&*/ File.Exists(bbs))
	{
		if (!File.Exists(bbsTarget))
		{
			Log.LogMessage(MessageImportance.High, " * BbsCopyLocalReference # [First Time] " + name+ext);
			File.Copy(bbs, bbsTarget, true);
		} else if (File.GetLastWriteTimeUtc(bbs) > File.GetLastWriteTimeUtc(bbsTarget)) {
			Log.LogMessage(MessageImportance.High, " * BbsCopyLocalReference # [Update] " + name+ext);
			File.Copy(dll, dllTarget, true);
			File.Copy(bbs, bbsTarget, true);
		} else {
			Log.LogMessage(MessageImportance.High, " * BbsCopyLocalReference # [Skip] " + name+ext);
		}
	} else {
		Log.LogMessage(MessageImportance.High, " * BbsCopyLocalReference # [N/A - no bbs] " + name+ext);
	}
}
			]]>
			</Code>
		</Task>
	</UsingTask>
	-->
	
</Project>